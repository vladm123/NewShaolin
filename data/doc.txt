NEWSHAOLIN
≡≡≡≡≡≡≡≡≡≡

Aceasta este documentaţia în format text a proiectului NEWSHAOLIN, realizat şi promovat ca proiect final la disciplina Reţele de Calculatoare de studenţii Sebastian Codrin Diţu & Vlad Manea din anul II, grupa 6A.

problemă
≡≡≡≡≡≡≡≡

Proiectul constă din realizarea unei aplicaţii software, folosind diverse paradigme ale programării în reţea, în limbajul C sau C++ standard, sub un sistem de operare Linux/UNIX.

problemă server
===============

Să se scrie un server care oferă diverse ştiri organizate în domenii şi subdomenii (de exemplu, Movies/SF/Futurology/BladeRunner sau Sports/Chess/Champions). Posibilii săi clienţi pot primi ştiri sau pot crea ştiri, conform drepturilor pe care le au. Astfel, clienţii se împart în două categorii: reader-client (poate doar citi ştirile) şi publisher-client (poate citi şi publica noi ştiri).

problemă client
===============

Să se scrie un client pentru serverul NewsS, conform unui protocol care să permită: obţinerea tuturor ştirilor dintr-o categorie dată şi/sau din toate sub-categoriile sale, solicitarea celor mai noi N ştiri, înregistrarea unei ştiri aparţinând unei anumite categorii etc. Toate erorile de protocol vor trebui tratate: acces interzis, utilizator necunoscut, categorie eronată etc.

soluţie
≡≡≡≡≡≡≡

Am modelat un protocol de comunicare între un server şi mai mulţi clienţi care accesează şi gestionează conţinutul prin intermediul serverului. Am implementat apoi un client şi un server funcţionale pe un sistem de operare Linux/UNIX, care comunică via acest protocol.

soluţie server
==============

Serverul trebuie să permită tratarea simultană a cererilor mai multor clienţi, fapt pentru care am ales soluţia unui server concurent implementat în limbajul C.
Ca soluţie pentru baza de date relaţională, în care se reţin elementele de conţinut, am ales tehnologia MySQL.

soluţie client
==============

Clientul asigură afişarea într-un mod plăcut a elementelor de conţinut, dar facilitează şi gestiunea acestora. Am implementat clientul în limbajul C++ şi i-am realizat o interfaţă grafică, implementată prin intermediul utilitarului Qt.

comunicare
≡≡≡≡≡≡≡≡≡≡

Comunicarea dintre client şi server se realizează prin intermediul unui protocol care permite accesul utilizatorilor şi gestiunea elementelor de conţinut (utilizator, categorie, ştire) de către utilizatorii care au drepturi pentru respectivele acţiuni.

Am implementat protocolul în baza protocolului TCP, comunicarea între procesele server şi clienţi realizându-se prin intermediul soclurilor BSD.

elemente de conţinut
====================

Protocolul gestionează trei elemente de conţinut: utilizatori, ştiri şi categorii.

drepturi utilizatori conectaţi
==============================

Am gândit drepturile diferit de clasicul 0777 deoarece, spre deosebire de acesta, ele sunt incluse unele în altele. Astfel, dreptul devine un întreg şi, în varianta actuală a protocolului, împarte utilizatorii conectaţi în 5 categorii.
Nu am limitat drepturile la o valoare superioară, din motive de posibilă extindere a funcţionalităţilor. 

verificare date
===============

Verificarea corectitudinii datelor se face la nivel de server, chiar dacă clientul poate avea măsuri suplimentare de siguranţă. Am aplicat acelaşi principiu ca la verificarea datelor în cadrul unui sit web realizat cu Javascript şi PHP: datele sunt verificate şi validate sau invalidate la nivelul formularului de către script, dar ele sunt validate în mod obligatoriu la preprocesare.
mod de funcţionare
Modul de funcţionare poate fi descris de automatul echivalent cu expresia (CVL*D)*, unde:
C = conectare
V = validare
L = lucru = cerereclient→server + procesareserver + răspunsserver→client
D = deconectare

Se face distincţie între conectarea/deconectarea procesului client şi conectarea/deconectarea utilizatorului de pe acel proces client. Ca exemplu, deşi un bancomat este rar conectat/deconectat de la reţea (proces), el permite conectarea/deconectarea (utilizator) multor trecători. În cele ce urmează, vom avea în vedere conectarea şi deconectarea utilizatorului.

Serverul primeşte de la client o comandă de conectare connuser cu date valide, în urma căreia comunicarea are loc în baza identităţii utilizatorului. La primirea de către server a unei comenzi de deconectare, de tipul dconnuser dinspre client, identitatea utilizatorului este pierdută, fără ca respectivul client să fie deconectat! Evident, la primirea a două comenzi care nu sunt succesive în expresie (de exemplu, două comenzi connuser între care nu există nicio validare şi apoi nicio comandă dconnuser), serverul nu permite reconectarea utilizatorului.
Acest mod de funcţionare este avantajos pentru comunicări intense, în care utilizatorul nu se schimbă. Exemple de comunicare în această idee pot fi cititoarele de ştiri automate, care se actualizează periodic, precum şi clienţii cu interfaţă, care blochează accesul utilizatorului la funcţionalitatea internă.

precomunicare
=============

Înainte de fiecare cerere şi de fiecare răspuns, protocolul necesită transmiterea a exact 10 octeţi, în care este scris aliniat la dreapta numărul de octeţi pe care este scrisă cererea sau este scris răspunsul propriu-zis, care urmează.

răspunsuri primite de la server
===============================

Pentru toate cererile clientului, serverul poate întoarce unul din răspunsurile de mai jos. La acestea se adaugă răspunsurile specifice fiecărei cereri în parte. Răspunsurile de succes specifice cererilor înlocuiesc răspunsul implicit!
+success este răspunsul implicit de succes, cu semnificaţia că serverul a procesat cererea fără probleme
+error|server|command este un răspuns de eroare, cu semnificaţia că respectiva comandă este invalidă
+error|server|permissions este un răspuns de eroare, cu semnificaţia că utilizatorul nu are drepturi suficiente
Prezentăm cererile protocolului, urmate de răspunsurile specifice. Notaţiile scrise cursiv vor fi înlocuite în comenzile reale cu valori cu respectivele semnificaţii.

utilizatori
===========

Cererea de înregistrare se poate realiza doar când nu există utilizator conectat la acel client. O înregistrare efectuată cu succes nu duce la conectarea utilizatorului nou, ci trebuie realizată o comandă separată de conectare.

înregistrare
------------

+reguser|username|password
Înregistrează un utilizator cu o parolă şi, în caz de succes, întoarce identificatorul. Comanda oferă utilizatorului dreptul de valoare 1, de citire a ştirilor şi categoriilor. Se consideră validă dacă nu există deja un utilizator conectat.
Răspunsuri posibile:
+error|username|invalid este răspunsul de eroare, cu semnificaţia că numele de utilizator este invalid
+error|password|invalid este răspunsul de eroare, cu semnificaţia că parola este invalidă
+success|id este răspunsul de succes, iar id este identificatorul utilizatorului înregistrat

modificare
----------

+moduser|id|password|permissions
+moduser|id|password
Schimbă drepturile unui utilizator. Prima comandă se consideră validă dacă dreptul utilizatorului conectat e 4 şi id nu e identificatorul utilizatorului conectat. A doua comandă se consideră validă dacă există un utilizator conectat şi comanda se realizează numai asupra identificatorului propriu.
Răspunsuri posibile:
+error|id|invalid este răspunsul de eroare, cu semnificaţia că identificatorul este invalid
+error|password|invalid este răspunsul de eroare, cu semnificaţia că parola este invalidă
+error|permissions|invalid este răspunsul de eroare, cu semnificaţia că dreptul este invalidă

ştergere
--------

Utilizatorii nu pot fi şterşi. Ei pot fi modificaţi la drepturi 0, caz în care nu mai au acces la ştiri şi categorii.
Am ales această soluţie pentru a păstra autorii ştirilor şi categoriilor intacţi, chiar dacă le sunt revocate drepturile.

vizualizare
-----------

+viewusers
Vizualizează utilizatorii şi, în caz de succes, întoarce identificatorul, numele şi drepturile fiecăruia. Se consideră validă dacă dreptul utilizatorului conectat e 4. Am ales această limitare deoarece uneori se doreşte ca identitatea utilizatorilor să fie secretă.
Răspunsuri posibile:
+success|id1|name1|moment1|permissions1|...|idk|namek|momentk|permissionsk|, unde k este numărul de utilizatori înregistraţi

+viewuser|id
Vizualizează un anumit utilizator şi, în caz de succes, întoarce date despre acesta. Se consideră validă dacă dreptul utilizatorului conectat e 4 sau există utilizator conectat cu acel id.
Răspunsuri posibile:
+error|id|invalid este răspunsul de eroare, cu semnificaţia că identificatorul este invalid
+success|id|permissions este răspunsul de succes, iar id şi permissions sunt identificatorul şi, respectiv, dreptul utilizatorului

conectare
---------

+connuser|username|password
Conectează un utilizator cu o parolă şi, în caz de succes, răspunde cu identificatorul şi permisiunile sale. Se consideră validă dacă nu există un utilizator conectat.
Răspunsuri posibile:
+error|username|invalid este răspunsul de eroare, cu semnificaţia că numele de utilizator este invalid
+error|password|invalid este răspunsul de eroare, cu semnificaţia că parola este invalidă
+success|id|permissions este răspunsul de succes, iar id este identificatorul utilizatorului conectat şi permissions este dreptul

deconectare
-----------

+dconnuser
Deconectează un utilizator. Se consideră validă dacă există deja un utilizator conectat la client.
ştiri
Ştirile pot fi vizualizate de utilizatorii cu drepturi nenule şi gestionate de cei care au cel puţin dreptul 2.

adăugare
--------

+addnew|name|text|catid
Adaugă o ştire şi, în caz de succes, răspunde cu identificatorul ştirii adăugate. Se consideră validă dacă dreptul utilizatorului conectat e 2, 3 sau 4.
Pentru catid, valoarea trebuie să existe!
Răspunsuri posibile:
+error|name|invalid este răspunsul de eroare, cu semnificaţia că numele este invalid
+error|text|invalid este răspunsul de eroare, cu semnificaţia că textul este invalid
+error|catid|invalid este răspunsul de eroare, cu semnificaţia că identificatorul categoriei este invalid
+success|id este răspunsul de succes, iar id este identificatorul ştirii adăugate

modificare
----------

+modnew|id|name|text|catid
Modifică o ştire. Se consideră validă dacă dreptul utilizatorului conectat e 4 sau dacă dreptul utilizatorului conectat e 2, 3 sau 4 şi ştirea a fost adăugată de el.
Pentru id şi catid, valorile trebuie să existe!
Răspunsuri posibile:
+error|id|invalid este răspunsul de eroare, cu semnificaţia că identificatorul este invalid
+error|name|invalid este răspunsul de eroare, cu semnificaţia că numele este invalid
+error|text|invalid este răspunsul de eroare, cu semnificaţia că textul este invalid
+error|catid|invalid este răspunsul de eroare, cu semnificaţia că identificatorul categoriei este invalid

ştergere
--------

+delnew|id
Şterge o ştire. Se consideră validă dacă dreptul utilizatorului conectat e 4 sau dacă dreptul utilizatorului conectat e 2, 3 sau 4 şi ştirea a fost adăugată de el.
Pentru id, valoarea trebuie să existe!
Răspunsuri posibile:
+error|id|invalid este răspunsul de eroare, cu semnificaţia că identificatorul este invalid

vizualizare
-----------

+viewnews|catid|r|t
Vizualizează ştirile şi, în caz de succes, întoarce nivelul, identificatorul, numele, textul, momentul şi identificatorul propunătorului. Se consideră validă dacă dreptul utilizatorului conectat e nenul.
Pentru catid, doar valoarea unei categorii valide filtrează ştirile după acea categorie.
Pentru r, doar dacă e nenul, se vizualizează doar ştirile de pe primele r nivele (pe nivelul 1, se află ştirile care sunt ataşate de categorii fără categorie părinte; pe nivelul 2, se află ştiri ataşate de categoriile ataşate de acestea etc.).
Pentru t, doar o valoare strict pozitivă ordonează ştirile invers cronologic şi trunchează la ultimele t ştiri per categorie.
Valorile 0 pentru aceşti ultimi doi parametri nu restricţionează datele.
Răspunsuri posibile:
+error|r|invalid este răspunsul de eroare, cu semnificaţia că parametrul pentru recursivitate este invalid
+error|t|invalid este răspunsul de eroare, cu semnificaţia că parametrul pentru trunchere este invalid
+success|level1|id1|nume1|text1|moment1|catid1|pid1|...|levelk|idk|numek|textk|momentk|catidk|pidk|, unde k este numărul de ştiri.

+viewnew|id
-----------

Vizualizează o anumită ştire şi, în caz de succes, întoarce date despre aceasta. Se consideră validă dacă dreptul utilizatorului conectat e nenul.
Pentru id, valoarea trebuie să existe!
Răspunsuri posibile:
+error|id|invalid este răspunsul de eroare, cu semnificaţia că identificatorul este invalid
+success|id|name|text|moment|catid|pid este răspunsul de succes

categorii
=========

Categoriile pot fi vizualizate de utilizatorii cu drepturi nenule şi gestionate de cei care au cel puţin dreptul 3.

adăugare
--------

+addcat|name|catid
Adaugă o ştire şi, în caz de succes, răspunde cu identificatorul ştirii adăugate. Se consideră validă dacă dreptul utilizatorului conectat e 3 sau 4.
Pentru catid, doar dacă există deja, se asociază cu părintele respectiv!
Răspunsuri posibile:
+error|name|invalid este răspunsul de eroare, cu semnificaţia că numele este invalid
+error|catid|invalid este răspunsul de eroare, cu semnificaţia că identificatorul categoriei părinte este invalid
+success|id este răspunsul de succes, iar id este identificatorul categoriei adăugate

modificare
----------

+modcat|id|name|catid
Modifică o categorie. Se consideră validă dacă dreptul utilizatorului conectat e 4 sau dacă dreptul utilizatorului conectat e 3 sau 4 şi categoria a fost adăugată de el.
Pentru catid, dacă există, se asociază cu părintele respectiv; dacă este 0, se detaşează categoria de la părinte, dacă exista; altfel, nu se asociază/detaşează.
Pentru id, valoarea trebuie să existe!
Răspunsuri posibile:
+error|id|invalid este răspunsul de eroare, cu semnificaţia că identificatorul este invalid
+error|name|invalid este răspunsul de eroare, cu semnificaţia că numele este invalid
+error|catid|invalid este răspunsul de eroare, cu semnificaţia că identificatorul categoriei părinte este invalid

ştergere
--------

+delcat|id
Şterge o categorie. Se consideră validă dacă dreptul utilizatorului conectat e 4 sau dacă dreptul utilizatorului conectat e 3 sau 4 şi categoria a fost adăugată de el.
Pentru id, valoarea trebuie să existe!
Răspunsuri posibile:
+error|id|invalid este răspunsul de eroare, cu semnificaţia că identificatorul este invalid

vizualizare
-----------

+viewcats
Vizualizează categoriile şi, în caz de succes, întoarce pentru fiecare nivelul, identificatorul şi numele în arbore. Procedura de citire parcurge arborele categoriilor în preordine! Se consideră validă dacă dreptul utilizatorului conectat e nenul.
Răspunsuri posibile:
+success|level1|id1|nume1|moment1|pid1|...|levelk|idk|numek|momentk|pidk|, unde k este numărul de categorii.

+viewcat|id
Vizualizează o anumită categorie şi, în caz de succes, întoarce date despre aceasta, inclusiv strămoşii ei. Se consideră validă dacă dreptul utilizatorului conectat e nenul.
Pentru id, valoarea trebuie să existe!
Răspunsuri posibile:
+error|id|invalid este răspunsul de eroare, cu semnificaţia că identificatorul este invalid
+success|id|name|text|moment|pid|catid1|catname1|...|catidk|catnamek| este răspunsul de succes, unde k este numărul de strămoşi, iar catidi e identificatorul categoriei strămoş de gradul i (cel de grad 1 e categoria de care este ataşată categoria cu identificatorul id; cel de grad 2 e categoria de care este ataşat strămoşul de grad 1 etc.). Categoria poate să nu aibă strămoşi, caz în care nu se afişează strămoşii.

structură
≡≡≡≡≡≡≡≡≡

Atât serverul, cât şi clientul au fost implementate modular. Fiecare element de conţinut beneficiază de sursele proprii, iar extinderea cu alte elemente de conţinut este facilă. Am izolat secvenţele de cod în care sunt specificate elemente ce pot fi completate ulterior, precum şi pe cele care comunică cu baza de date. Interfaţa clientului este, de asemenea, separată de codul de comunicare şi transfer cu serverul.

structură bază de date
======================

Baza de date a fost modelată conform standardelor modelării datelor:
am normalizat la 3NF, cu excepţia atributului drept, pentru simplitate
am asigurat integritatea referenţială
am asigurat unicitatea cheilor

structură server
================

Serverul este împărţit în mai multe surse, astfel încât întreg codul să fie uşor de consultat şi reutilizat.
main.c conţine funcţia main, care se ocupă cu gestiunea clienţilor.
handlers.c conţine funcţiile care tratează erorile, citirea, scrierea, precum şi operaţiile cu şirurile de caractere:
requests.c conţine funcţia care selectează cererea clientului.
usersc.c conţine funcţiile care tratează acţiunile referitoare la utilizatori, asigurând integritatea datelor.
catsc.c conţine funcţiile care tratează acţiunile referitoare la categorii, asigurând integritatea datelor.
newsc.c conţine funcţiile care tratează acţiunile referitoare la ştiri, asigurând integritatea datelor.
userssql.c conţine funcţiile care tratează acţiunile referitoare la utilizatori, interogând baza de date MySQL.
catssql.c conţine funcţiile care tratează acţiunile referitoare la categorii, interogând baza de date MySQL.
newssql.c conţine funcţiile care tratează acţiunile referitoare la ştiri, interogând baza de date MySQL.

mostră cod
----------

Prezentăm un exemplu de fişier sursă, newssql.c:

/*

    Copyright 2009, 2010 Vlad Manea, Sebastian Codrin Ditu

    This file is part of newshaolin.

        newshaolin is free software: you can redistribute it and/or modify
        it under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        newshaolin is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License for more details.

        You should have received a copy of the GNU General Public License
        along with newshaolin.  If not, see <http://www.gnu.org/licenses/>.

*/

#include "newssql.h"
#include "globals.h"

/* definesc functia de adaugare a unei stiri, care intoarce identificatorul stirii adaugate */
int sql_new_add(char *name, char *text, int catid)
{
    /* declar variabila care retine rezultatul */
    int ans;

    /* declar variabila care retine interogarea */
    char *query = NULL;

    /* declar variabila care retine conexiunea la serverul MySQL */
    MYSQL *conn = NULL;

    /* declar variabila care retine rezultatul interogarii */
    MYSQL_RES *result = NULL;

    /* declar variabila care retine randul interogarii */
    MYSQL_ROW row;

    /* aloc memorie pentru query */
    if ((query = (char *)realloc(query, sizeof(char) * (128 + inlength))) == NULL)
        handle_error("newssql::sql_new_add::realloc(query, 128 + inlength)");

    /* initializez conexiunea la baza de date, CU TRATAREA ERORILOR */
    if ((conn = mysql_init(NULL)) == NULL)
        handle_error("newssql::sql_new_add::mysql_init(conn)");

    /* conectez la baza de date, CU TRATAREA ERORILOR */
    if (mysql_real_connect(conn, "localhost", "root", "root", "rcnews", 0, NULL, 0) == NULL)
        handle_error("newssql::sql_new_add::mysql_real_connect(conn, rcnews)");

    /* creez sirul de caractere pentru query INSERT */
    sprintf(query, "INSERT INTO news VALUES ('', '%s', '%s', CONCAT(CURRENT_DATE(), ' ', CURRENT_TIME()),
                   '%d', '%d');", name, text, catid, connected);

    /* adaug stirea, CU TRATAREA ERORILOR */
    if (mysql_query(conn, query))
        handle_error("newssql::sql_new_add::mysql_query(conn, insert)");

    /* creez sirul de caractere pentru query SELECT */
    sprintf(query, "SELECT id FROM news WHERE category_id='%d' and user_id='%d' and name='%s'
                    and text='%s';", catid, connected, name, text);

    /* aflu stirea, CU TRATAREA ERORILOR */
    if (mysql_query(conn, query))
        handle_error("newssql::sql_new_add::mysql_query(conn, select)");

    /* citesc rezultatul interogarii */
    if (!(result = mysql_store_result(conn)))
        handle_error("newssql::sql_new_add::mysql_store_result(conn, select)");

    /* verific valoarea raspunsului */
    if (row = mysql_fetch_row(result))
    {
        /* retin primul camp */
        ans = atoi(row[0]);
    }
    else
    {
        /* consider utilizator fictiv, dar e posibil sa fi fost sters! */
        ans = 0;
    }

    /* eliberez rezultatul */
    mysql_free_result(result);

    /* inchid conexiunea la baza de date */
    mysql_close(conn);

    /* intorc raspunsul */
    return ans;    
}

/* definesc functia de modificare a unei stiri, care intoarce idul stirii modificate */
int sql_new_modify(int id, char *name, char *text, int catid)
{
    /* declar variabila care retine rezultatul */
    int ans;

    /* declar variabila care retine interogarea */
    char *query = NULL;

    /* declar variabila care retine conexiunea la serverul MySQL */
    MYSQL *conn = NULL;

    /* declar variabila care retine rezultatul interogarii */
    MYSQL_RES *result = NULL;

    /* declar variabila care retine randul interogarii */
    MYSQL_ROW row;

    /* aloc memorie pentru query */
    if ((query = (char *)realloc(query, sizeof(char) * (128 + inlength))) == NULL)
        handle_error("newssql::sql_new_modify::realloc(query, 128 + inlength)");

    /* initializez conexiunea la baza de date, CU TRATAREA ERORILOR */
    if ((conn = mysql_init(NULL)) == NULL)
        handle_error("newssql::sql_new_modify::mysql_init(conn)");

    /* conectez la baza de date, CU TRATAREA ERORILOR */
    if (mysql_real_connect(conn, "localhost", "root", "root", "rcnews", 0, NULL, 0) == NULL)
        handle_error("newssql::sql_new_modify::mysql_real_connect(conn, rcnews)");

    /* creez sirul de caractere pentru query INSERT */
    sprintf(query, "UPDATE news SET name='%s', moment=CONCAT(CURRENT_DATE(), ' ', CURRENT_TIME()),
                    text='%s', category_id='%d' WHERE id='%d';", name, text, catid, id);

    /* adaug stirea, CU TRATAREA ERORILOR */
    if (mysql_query(conn, query))
        ans = 0;
    else
        ans = id;

    /* eliberez rezultatul */
    mysql_free_result(result);

    /* inchid conexiunea la baza de date */
    mysql_close(conn);

    /* intorc raspunsul */
    return ans;    
}

/* definesc functia de stergere a unei stiri */
int sql_new_remove(int id)
{
    /* declar variabila care retine rezultatul */
    int ans;

    /* declar variabila care retine interogarea */
    char *query = NULL;

    /* declar variabila care retine conexiunea la serverul MySQL */
    MYSQL *conn = NULL;

    /* aloc memorie pentru query */
    if ((query = (char *)realloc(query, sizeof(char) * (128 + inlength))) == NULL)
        handle_error("newssql::sql_new_remove::realloc(query, 128 + inlength)");

    /* initializez conexiunea la baza de date, CU TRATAREA ERORILOR */
    if ((conn = mysql_init(NULL)) == NULL)
        handle_error("newssql::sql_new_remove::mysql_init(conn)");

    /* conectez la baza de date, CU TRATAREA ERORILOR */
    if (mysql_real_connect(conn, "localhost", "root", "root", "rcnews", 0, NULL, 0) == NULL)
        handle_error("newssql::sql_new_remove::mysql_real_connect(conn, rcnews)");

    /* construiesc cererea sql */
    sprintf(query, "DELETE FROM news WHERE id = '%d';", id);

    /* adaug stirea, CU TRATAREA ERORILOR */
    if (mysql_query(conn, query))
        handle_error("newssql::sql_new_remove::mysql_query(conn, insert)");

    /* am sters cu succes stirea */
    return 1;
}

/* definesc functia recursiva de vizualizare a stirilor */
void sql_news_view(int catid, int levmax, int lev, int limit)
{
    /* declar variabila care verifica validitatea categoriei */
    int user;

    /* declar variabila care retine identificatorul categoriei curente */
    int id;

    /* declar variabila care retine numarul nivelului stirii */
    char number[11];

    /* declar variabila care retine interogarea */
    char *query = NULL;

    /* declar variabila care retine conexiunea la serverul MySQL */
    MYSQL *conn = NULL;

    /* declar variabila care retine rezultatul interogarii */
    MYSQL_RES *result = NULL;

    /* declar variabila care retine randul interogarii */
    MYSQL_ROW row;

    /* verific sa nu fi depasit nivelul */
    if (levmax > 0 && lev >= levmax)
    {
        /* intorc */
        return;
    }

    /* initializez conexiunea la baza de date, CU TRATAREA ERORILOR */
    if ((conn = mysql_init(NULL)) == NULL)
        handle_error("newssql::sql_news_view::mysql_init(conn)");

    /* conectez la baza de date, CU TRATAREA ERORILOR */
    if (mysql_real_connect(conn, "localhost", "root", "root", "rcnews", 0, NULL, 0) == NULL)
        handle_error("newssql::sql_news_view::mysql_real_connect(conn, rcnews)");

    /* aloc memorie pentru query */
    if ((query = (char *)realloc(query, sizeof(char) * (128 + inlength))) == NULL)
        handle_error("newssql::sql_news_view::realloc(query, 128 + inlength)");

    /* verific validitatea categoriei */
    if ((user = sql_cat_user_exists(catid)) <= 0)
    {
        /* creez sirul de caractere pentru query SELECT */
        sprintf(query, "SELECT id FROM categories WHERE parent_id IS NULL;");

        /* gasesc categoriile, CU TRATAREA ERORILOR */
        if (mysql_query(conn, query))
            handle_error("newssql::sql_news_view::mysql_query(conn, select)");

        /* retin rezultatul */
        if ((result = mysql_store_result(conn)) == NULL)
            handle_error("newssql::sql_news_view::mysql_store_result(conn, select)");    

        /* parcurg intrarile selectate din baza de date */
        while (row = mysql_fetch_row(result))
        {
            /* retin valoarea identificatorului*/
            if ((id = atoi(row[0])) > 0)
            {
                /* reapelez cu categorie valida */
                sql_news_view(id, levmax, lev, limit); 
            }
    
            /* tratez si celalalt caz */
            else
            {
                /* trec la randul urmator extras */
                continue;
            }
        }
    }
    
    /* tratez cazul cand categoria e valida */
    else
    {
        /* creez sirul de caractere pentru query SELECT */
        if (limit > 0)        
            sprintf(query, "SELECT id, name, text, moment, category_id, user_id FROM news
                            WHERE category_id = '%d' ORDER BY moment DESC LIMIT %d;", catid, limit);
        else
            sprintf(query, "SELECT id, name, text, moment, category_id, user_id FROM news
                            WHERE category_id = '%d' ORDER BY moment DESC;", catid);

        /* gasesc stirile, CU TRATAREA ERORILOR */
        if (mysql_query(conn, query))
            handle_error("newssql::sql_news_view::mysql_query(conn, select)");

        /* retin rezultatul */
        if ((result = mysql_store_result(conn)) == NULL)
            handle_error("newssql::sql_news_view::mysql_store_result(conn, select)");    

        /* parcurg intrarile selectate din baza de date */
        while (row = mysql_fetch_row(result))
        {
            /* construiesc numarul */
            sprintf(number, "%d", lev);

            /* scriu bara in raspus */
            handle_output("|", 1);

            /* scriu nivelul in raspuns */
            handle_output(number, 1);

            /* scriu bara in raspus */
            handle_output("|", 1);

            /* scriu identificatorul stirii */
            handle_output(row[0], 1);
            
            /* scriu bara in raspus */
            handle_output("|", 1);

            /* scriu numele stirii */
            handle_output(row[1], 1);

            /* scriu bara in raspus */
            handle_output("|", 1);

            /* scriu textul stirii */
            handle_output(row[2], 1);

            /* scriu bara in raspus */
            handle_output("|", 1);

            /* scriu momentul stirii */
            handle_output(row[3], 1);

            /* scriu bara in raspus */
            handle_output("|", 1);

            /* scriu categoria stirii */
            handle_output(row[4], 1);

            /* scriu bara in raspus */
            handle_output("|", 1);

            /* scriu identificatorul propunatorului stirii */
            handle_output(row[5], 1);
        }

        /* creez sirul de caractere pentru query SELECT */
        sprintf(query, "SELECT id FROM categories WHERE parent_id = '%d';", catid);

        /* gasesc categoriile, CU TRATAREA ERORILOR */
        if (mysql_query(conn, query))
            handle_error("newssql::sql_news_view::mysql_query(conn, select)");

        /* retin rezultatul */
        if ((result = mysql_store_result(conn)) == NULL)
            handle_error("newssql::sql_news_view::mysql_store_result(conn, select)");    

        /* parcurg intrarile selectate din baza de date */
        while (row = mysql_fetch_row(result))
        {
            /* retin valoarea identificatorului*/
            if ((id = atoi(row[0])) > 0)
            {
                /* reapelez cu categorie valida */
                sql_news_view(id, levmax, lev + 1, limit); 
            }

            /* tratez si celalalt caz */
            else
            {
                /* trec la randul urmator extras */
                continue;
            }
        }
    }

    /* eliberez rezultatul */
    mysql_free_result(result);

    /* inchid conexiunea la baza de date */
    mysql_close(conn);
}

/* definesc functia de vizualizareaa a news */
int sql_new_view(int id)
{
    /* declar raspunsul */
    int ans;
    
    /* declar variabila care retine interogarea */
    char *query = NULL;

    /* declar variabila care retine conexiunea la serverul MySQL */
    MYSQL *conn = NULL;

    /* declar variabila care retine rezultatul interogarii */
    MYSQL_RES *result = NULL;

    /* declar variabila care retine randul interogarii */
    MYSQL_ROW row;    

    /* aloc memorie pentru query */
    if ((query = (char *)realloc(query, sizeof(char) * (128 + inlength))) == NULL)
        handle_error("newssql::sql_new_view::realloc(query, 128 + inlength)");

    /* initializez conexiunea la baza de date, CU TRATAREA ERORILOR */
    if ((conn = mysql_init(NULL)) == NULL)
        handle_error("newssql::sql_new_view::mysql_init(conn)");

    /* conectez la baza de date, CU TRATAREA ERORILOR */
    if (mysql_real_connect(conn, "localhost", "root", "root", "rcnews", 0, NULL, 0) == NULL)
        handle_error("newssql::sql_new_view::mysql_real_connect(conn, rcnews)");

    /* creez sirul de caractere pentru query SELECT */
    sprintf(query, "SELECT * FROM news WHERE id ='%d';", id);

    /* gasesc utilizatorul, CU TRATAREA ERORILOR */
    if (mysql_query(conn, query))
        handle_error("newssql::sql_new_view::mysql_query(conn, select)");

    /* retin rezultatul */
    if ((result = mysql_store_result(conn)) == NULL)
        handle_error("newssql::sql_new_view::mysql_store_result(conn, select)");    

    /* parcurg intrarile selectate din baza de date */
    if (row = mysql_fetch_row(result))
    {
        /* construiesc raspunsul */
        handle_output("success", 0);
        
        /* scriu bara in raspuns */
        handle_output("|", 1);

        /* scriu identificatorul stirii */
        handle_output(row[0], 1);

        /* scriu bara in raspuns */
        handle_output("|", 1);

        /* scriu numele stirii */
        handle_output(row[1], 1);

        /* scriu bara in raspuns */
        handle_output("|", 1);

        /* scriu textul stirii */
        handle_output(row[2], 1);

        /* scriu bara in raspuns */
        handle_output("|", 1);

        /* scriu momentul stirii */
        handle_output(row[3], 1);

        /* scriu bara in raspuns */
        handle_output("|", 1);

        /* scriu categoria parinte stirii */
        handle_output(row[4], 1);

        /* scriu bara in raspuns */
        handle_output("|", 1);

        /* scriu identificatorul propunatorului stirii */
        handle_output(row[5], 1);

        /* raspunsul este valid */
        ans = 1;
    }
    else
    {
        /* scriu eroare de id */
        handle_output(errors[1], 0);

        /* raspunsul este invalid */
        ans = 0;
    }

    /* eliberez rezultatul */
    mysql_free_result(result);

    /* inchid conexiunea la baza de date */
    mysql_close(conn);

    /* intorc starea */
    return ans;
}


/* definesc functia de test a existentei unei stiri dupa id */
int sql_new_user_exists(int id)
{
    /* declar variabila care retine interogarea */
    char *query = NULL;

    /* declar variabila care retine rezultatul */
    int ans;
    
    /* declar variabila care retine conexiunea la serverul MySQL */
    MYSQL *conn = NULL;

    /* declar variabila care retine rezultatul interogarii */
    MYSQL_RES *result = NULL;

    /* declar variabila care retine randul interogarii */
    MYSQL_ROW row;

    /* aloc memorie pentru query */
    if ((query = (char *)realloc(query, sizeof(char) * (128 + inlength))) == NULL)
        handle_error("newssql::sql_new_user_exists::realloc(query, 128 + inlength)");

    /* initializez conexiunea la baza de date, CU TRATAREA ERORILOR */
    if ((conn = mysql_init(NULL)) == NULL)
        handle_error("newssql::sql_new_user_exists::mysql_init(conn)");

    /* conectez la baza de date, CU TRATAREA ERORILOR */
    if (mysql_real_connect(conn, "localhost", "root", "root", "rcnews", 0, NULL, 0) == NULL)
        handle_error("newssql::sql_new_user_exists::mysql_real_connect(conn, rcnews)");

    /* creez sirul de caractere pentru query SELECT */
    sprintf(query, "SELECT user_id FROM news WHERE id = '%d';", id);

    /* gasesc utilizatorul, CU TRATAREA ERORILOR */
    if (mysql_query(conn, query))
        handle_error("newssql::sql_new_user_exists::mysql_query(conn, select)");

    if ((result = mysql_store_result(conn)) == NULL)
        handle_error("newssql::sql_new_user_exists::mysql_store_result(conn, select)");    

    /* verific daca am raspuns */
    if (row = mysql_fetch_row(result))
    {
        /* retin primul camp */
        ans = atoi(row[0]);
    }
    
    /* verific celalalt caz */
    else
    {
        /* consider stire fictiva, dar e posibil sa fi fost stearsa! */
        ans = 0;
    }

    /* eliberez rezultatul */
    mysql_free_result(result);

    /* inchid conexiunea la baza de date */
    mysql_close(conn);

    /* intorc raspunsul */
    return ans;    
}

extensibilitate server
----------------------

Pentru a extinde serverul cu noi comenzi, sunt necesare adăugarea acestora în sursa requests.c, precum şi adăugarea surselor respective. Mesajele de eroare, precum şi alte variabile globale, pot fi modificate din fişierul globals.c.
Am implementat şi comentat codul serverului în scop educaţional. Datorită licenţei GNU GPL, sub care a fost realizat, el poate fi dezvoltat mai departe de cine doreşte.

dezvoltare
≡≡≡≡≡≡≡≡≡≡

În realizarea proiectului, am parcurs etapele de:
+documentare
+proiectare
+implementare
+testare
Ultimele două etape au fost repetate.

documentare
===========

În etapa de documentare, am consultat materialele din bibliografie şi am adunat datele necesare pentru realizarea proiectului. S-a dovedit, aşa cum era de aşteptat, că această etapă s-a extins asupra întregului timp de dezvoltare a proiectului, în special în cazul implementării clientului.

proiectare
==========

Etapa de proiectare a constat în modelarea bazei de date şi confruntarea datelor stocate cu restricţiile interfeţei lui Codrin. Am ajuns la concluzia că, deşi modelul permite o descendenţă infinită a categoriilor, în practică este indicat ca descendenţa să fie limitată programatic. În aceeaşi etapă am modelat protocolul, această parte continuând cu mici modificări în decursul implementării.

implementare
============

Implementarea a constat în realizarea efectivă a aplicaţiilor, clientul fiind, în mod natural, defazat faţă de server. În primele zile, Vlad a implementat serverul şi un client mostră cu care a fost testat serverul, urmând ca aplicaţia client reală, implementată de Codrin, să aibă deja un server funcţional pe care să fie testată.

testare
=======

Testarea funcţionalităţilor serverului a fost realizată prin comenzi de:
+interacţiune: procedurile de conectare/deconectare ale clienţilor
+sondaj: selectări la întâmplare din baza de date
+alterare: blocuri de adăugări, modificări şi ştergeri, urmate de verificarea rezultatului final cu cel aşteptat.

probleme întâmpinate & soluţii propuse
======================================

La server, cele mai dificile probleme şi rezolvările lor au fost:
alocarea unor zone de dimensiuni neconstante de memorie, pentru datele transmise ca răspuns clientului
am întâmpinat această problemă prin realizarea etapei de precomunicare
parcurgerea tuturor categoriilor copil şi a categoriilor părinte
am rezolvat această cerinţă prin implementarea a două funcţii recursive care accesează baza de date

La client, cele mai grele sarcini şi soluţiile lor au fost:
integrarea interfeţei şi comunicării cu serverul într-o aplicaţie unitară
am implementat obiect clientul şi am trecut elegant peste această dificultate
ergonomia interfeţei client
am analizat situri de ştiri renumite de pe internet în calitate de vizitator

bibliografie
≡≡≡≡≡≡≡≡≡≡≡≡

Pentru realizarea proiectului, am consultat resurse diverse, atât publicaţii în format tipărit, cât în format electronic.

publicaţii în format tipărit
============================

+Atelier de programare în reţele de calculatoare, Sabin Buraga, Gabriel Ciobanu, Polirom 2001
+Manual de Informatică pentru clasa a XII-a, Carmen Popescu, L & S Infomat 2007
+MySQL. Developer's Library. Fourth Edition, Paul DuBois, Addison-Wesley 2008, www.kitebird.com/mysql-book/

documentaţii oficiale în format electronic
==========================================

+Qt Getting Started, qt.nokia.com/developer/getting-started
+MySQL Documentation, dev.mysql.com/doc/index.html

cursuri în format electronic
============================

Reţele de Calculatoare, Lenuţa Alboaie, profs.info.uaic.ro/~adria/teach/courses/net/

tutoriale în format electronic
==============================

MySQL C API Programming Tutorial, Jan Bodnar, www.zetcode.com/tutorials/mysqlcapitutorial
Introducere (sau mic ghid practic) în MySQL, traducere de Carmen Leonte, profs.info.uaic.ro/~busaco/teach/courses/net/docs/mysql-ro.pdf
Qt4 Programming Tutorial, Jan Bodnar, www.zetcode.com/tutorials/qt4tutorial